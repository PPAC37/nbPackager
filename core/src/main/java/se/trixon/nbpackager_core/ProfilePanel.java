/*
 * Copyright 2020 Patrik Karlström.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package se.trixon.nbpackager_core;

import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import se.trixon.almond.util.Dict;
import static se.trixon.nbpackager_core.Options.*;

/**
 *
 * @author Patrik Karlström
 */
public class ProfilePanel extends javax.swing.JPanel {

    private final Options mOptions = Options.getInstance();

    /**
     * Creates new form ProfilePanel
     */
    public ProfilePanel() {
        initComponents();
    }

    void loadProfile(String profile) {
        Preferences p = mOptions.getPreferences().node(KEY_PROFILES).node(profile);

        sourceFileChooserPanel.setPath(p.get(KEY_PROFILE_SOURCE, ""));
    }

    void removeProfile(String profile) {
        Preferences p = mOptions.getPreferences().node(KEY_PROFILES).node(profile);
        try {
            p.removeNode();
        } catch (BackingStoreException ex) {
            Logger.getLogger(ProfilePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    void saveProfile(String profile) {
        Preferences p = mOptions.getPreferences().node(KEY_PROFILES).node(profile);

        p.put(KEY_PROFILE_SOURCE, sourceFileChooserPanel.getPath());
//        List<String> vvv = jmodsList.getSelectedValuesList();
//        p.put(KEY_PROFILE_MODULES, String.join(",", vvv));
//        p.put(KEY_PROFILE_CUSTOM_MODULE_PATH, customModulePathTextArea.getText());
//        p.put(KEY_PROFILE_CUSTOM_MODULES, customModulesTextArea.getText());
//        p.putBoolean(KEY_PROFILE_BIND_SERVICES, bindServicesCheckBox.isSelected());
//        p.putBoolean(KEY_PROFILE_IGNORE_SIGNING, signingCheckBox.isSelected());
//        p.putBoolean(KEY_PROFILE_NO_HEADER, headersCheckBox.isSelected());
//        p.putBoolean(KEY_PROFILE_NO_MAN, manCheckBox.isSelected());
//        p.putBoolean(KEY_PROFILE_STRIP_DEBUG, stripCheckBox.isSelected());
//        p.putInt(KEY_PROFILE_COMPRESS, compressComboBox.getSelectedIndex());
//        p.putInt(KEY_PROFILE_ENDIAN, endianComboBox.getSelectedIndex());
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sourceFileChooserPanel = new se.trixon.almond.util.swing.dialogs.FileChooserPanel();
        destFileChooserPanel = new se.trixon.almond.util.swing.dialogs.FileChooserPanel();
        resourcesFileChooserPanel = new se.trixon.almond.util.swing.dialogs.FileChooserPanel();
        appImageFileChooserPanel = new se.trixon.almond.util.swing.dialogs.FileChooserPanel();
        criFileChooserPanel = new se.trixon.almond.util.swing.dialogs.FileChooserPanel();
        sha256CheckBox = new javax.swing.JCheckBox();
        sha512CheckBox = new javax.swing.JCheckBox();
        destPanel = new javax.swing.JPanel();
        appCheckBox = new javax.swing.JCheckBox();
        linuxCheckBox = new javax.swing.JCheckBox();
        macCheckBox = new javax.swing.JCheckBox();
        winCheckBox = new javax.swing.JCheckBox();

        sourceFileChooserPanel.setCheckBoxMode(false);
        sourceFileChooserPanel.setHeader(Dict.SOURCE.toString());
        sourceFileChooserPanel.setMode(1);

        destFileChooserPanel.setHeader(Dict.DESTINATION.toString());

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("se/trixon/cricreator_core/Bundle"); // NOI18N
        resourcesFileChooserPanel.setHeader(bundle.getString("resources")); // NOI18N

        appImageFileChooserPanel.setHeader(bundle.getString("template")); // NOI18N

        criFileChooserPanel.setHeader(bundle.getString("cri")); // NOI18N

        sha256CheckBox.setText("sha256sum");

        sha512CheckBox.setText("sha512sum");

        appCheckBox.setText("AppImage");
        destPanel.add(appCheckBox);

        linuxCheckBox.setText("Linux");
        destPanel.add(linuxCheckBox);

        macCheckBox.setText("MaxOS");
        destPanel.add(macCheckBox);

        winCheckBox.setText("Windows");
        destPanel.add(winCheckBox);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sourceFileChooserPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 752, Short.MAX_VALUE)
                            .addComponent(resourcesFileChooserPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(appImageFileChooserPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(criFileChooserPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(destFileChooserPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(sha256CheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sha512CheckBox)
                                .addGap(0, 530, Short.MAX_VALUE))))
                    .addComponent(destPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sourceFileChooserPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(destFileChooserPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resourcesFileChooserPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(appImageFileChooserPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(criFileChooserPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sha256CheckBox)
                    .addComponent(sha512CheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(destPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox appCheckBox;
    private se.trixon.almond.util.swing.dialogs.FileChooserPanel appImageFileChooserPanel;
    private se.trixon.almond.util.swing.dialogs.FileChooserPanel criFileChooserPanel;
    private se.trixon.almond.util.swing.dialogs.FileChooserPanel destFileChooserPanel;
    private javax.swing.JPanel destPanel;
    private javax.swing.JCheckBox linuxCheckBox;
    private javax.swing.JCheckBox macCheckBox;
    private se.trixon.almond.util.swing.dialogs.FileChooserPanel resourcesFileChooserPanel;
    private javax.swing.JCheckBox sha256CheckBox;
    private javax.swing.JCheckBox sha512CheckBox;
    private se.trixon.almond.util.swing.dialogs.FileChooserPanel sourceFileChooserPanel;
    private javax.swing.JCheckBox winCheckBox;
    // End of variables declaration//GEN-END:variables
}
